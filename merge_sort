#include <iostream>
#include <time.h>
#include <windows.h>

using namespace std;

void scalanie(int tablica[], int start, int srodek, int koniec);
void sortowaniePrzezScalanie(int tablica[], int start, int koniec);
bool czyTablicaJestPosortowana(int tablica[], int iloscLiczb);


int main()
{
    int ile;

    cout << "Podaj ile liczb posortowac: ";
    cin>>ile;

    int *tablica = new int [ile];

    srand(time(NULL));

    for (int i=0; i<ile; i++)
    {
        tablica[i]=rand()%100000+1;
    }

    cout<<"Przed posortowaniem: "<<endl;
    for(int i=0; i<ile; i++)
    {
        cout<<tablica[i]<<" ";
    }

    cout<<endl;

    sortowaniePrzezScalanie(tablica, 0, ile-1);

    cout<<"Po posortowaniu: "<<endl;
    for(int i=0; i<ile; i++)
    {
        cout<<tablica[i]<<" ";
    }

    cout<<endl;

    if (czyTablicaJestPosortowana(tablica,ile) == true)
        cout << "TAK. Tablica jest posortowana." << endl;
    else
        cout << "NIE. Tablica nie jest posortowana." << endl;

    delete [] tablica;


    return 0;
}


void scalanie(int tablica[], int start, int srodek, int koniec)
{
    int *tab_pom = new int[(koniec-start+1)];
    int i = start, j = srodek+1, k = 0;

    while (i <= srodek && j <= koniec)
    {
        if (tablica[j] < tablica[i])
        {
            tab_pom[k] = tablica[j];
            j++;
        }
        else
        {
            tab_pom[k] = tablica[i];
            i++;
        }
        k++;
    }

    if (i <= srodek)
    {
        while (i <= srodek)
        {
            tab_pom[k] = tablica[i];
            i++;
            k++;
        }
    }
    else
    {
        while (j <= koniec)
        {
            tab_pom[k] = tablica[j];
            j++;
            k++;
        }
    }

    for (i = 0; i <= koniec-start; i++)
        tablica[start+i] = tab_pom[i];

    delete [] tab_pom;
}

void sortowaniePrzezScalanie(int tablica[], int start, int koniec)
{
    int srodek;

    if (start != koniec)
    {
        srodek = (start + koniec)/2;
        sortowaniePrzezScalanie(tablica, start, srodek);
        sortowaniePrzezScalanie(tablica, srodek+1, koniec);
        scalanie(tablica, start, srodek, koniec);
    }
}


bool czyTablicaJestPosortowana(int tablica[], int iloscLiczb)
{
    bool posortowana = true;
    for (int i = 0; i < iloscLiczb-1; i++)
    {
        if (tablica[i] > tablica[i+1])

            posortowana = false;
    }
    return posortowana;
}



