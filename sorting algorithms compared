#include <iostream>
#include <time.h>
#include <windows.h>

using namespace std;

void sortowanieBabelkowe(int *tab, int n);
void quicksort(int *tablica, int lewy, int prawy);
void scalanie(int tablica[], int start, int srodek, int koniec);
void sortowaniePrzezScalanie(int tablica[], int start, int koniec);
void sortowaniePrzezWybieranie (int tab[], int n);
void sortowaniePrzezWstawianie(int tab[], int rozmiar);
bool czyTablicaJestPosortowana(int tablica[], int iloscLiczb);

int ile;
clock_t start,stop;
double czas;

int main()
{
    cout << "Porownanie czasow sortowania" << endl;

    cout << "Podaj ile liczb posortowac: ";
    cin>>ile;

    int *tablica = new int [ile];
    int *tablica2 = new int [ile];
    int *tablica3 = new int [ile];
    int *tablica4 = new int [ile];
    int *tablica5 = new int [ile];

    srand(time(NULL));

    for (int i=0; i<ile; i++)
    {
        tablica[i]=rand()%100000+1;
    }

    for(int i=0; i<ile; i++)
    {
       tablica[i]=tablica2[i]=tablica3[i]=tablica4[i]=tablica5[i];
    }

    /*cout<<"Przed posortowaniem: "<<endl;
    for(int i=0; i<ile; i++)
    {
        cout<<tablica[i]<<" ";
    }*/

    cout<<endl;

    start = clock();
    sortowanieBabelkowe(tablica,ile);
    stop = clock();
    czas = (double)(stop-start) / CLOCKS_PER_SEC;
    cout<<endl<<"Czas sortowania babelkowego: "<<czas<<" s"<<endl;

    start = clock();
    quicksort(tablica, 0, ile-1);
    stop = clock();
    czas = (double)(stop-start) / CLOCKS_PER_SEC;
    cout<<endl<<"Czas sortowania quicksort: "<<czas<<" s"<<endl;

    start = clock();
    sortowaniePrzezScalanie(tablica, 0, ile-1);
    stop = clock();
    czas = (double)(stop-start) / CLOCKS_PER_SEC;
    cout<<endl<<"Czas sortowania przez scalanie: "<<czas<<" s"<<endl;

    start = clock();
    sortowaniePrzezWybieranie(tablica, ile);
    stop = clock();
    czas = (double)(stop-start) / CLOCKS_PER_SEC;
    cout<<endl<<"Czas sortowania przez wybieranie (selectionsort): "<<czas<<" s"<<endl;

    start = clock();
    sortowaniePrzezWstawianie(tablica,ile);
    stop = clock();
    czas = (double)(stop-start) / CLOCKS_PER_SEC;
    cout<<endl<<"Czas sortowania przez wstawianie (insertionsort): "<<czas<<" s"<<endl;

    cout<<endl;

    /*cout<<"Po posortowaniu: "<<endl;
    for(int i=0; i<ile; i++)
    {
        cout<<tablica[i]<<" ";
    }*/

    cout<<endl;

    if (czyTablicaJestPosortowana(tablica,ile) == true)
        cout << "TAK. Tablica jest posortowana." << endl;
    else
        cout << "NIE. Tablica nie jest posortowana." << endl;

    delete [] tablica;
    delete [] tablica2;
    delete [] tablica3;
    delete [] tablica4;
    delete [] tablica5;


    return 0;
}

void sortowanieBabelkowe(int *tab, int n)
{
    for(int i=1; i<n; i++)
    {
        for(int j=n-1; j>=1; j--)
        {
            if(tab[j]<tab[j-1])
            {
                int bufor;
                bufor=tab[j-1];
                tab[j-1]=tab[j];
                tab[j]=bufor;
            }
        }
    }
}

void quicksort(int *tablica, int lewy, int prawy)
{
    int v=tablica[(lewy+prawy)/2];
    int i,j,x;
    i=lewy;
    j=prawy;
    do
    {
        while(tablica[i]<v) i++;
        while(tablica[j]>v) j--;
        if(i<=j)
        {
            x=tablica[i];
            tablica[i]=tablica[j];
            tablica[j]=x;
            i++;
            j--;
        }
    }
    while(i<=j);
    if(j>lewy) quicksort(tablica,lewy, j);
    if(i<prawy) quicksort(tablica, i, prawy);
}

void scalanie(int tablica[], int start, int srodek, int koniec)
{
    int *tab_pom = new int[(koniec-start+1)];
    int i = start, j = srodek+1, k = 0;

    while (i <= srodek && j <= koniec)
    {
        if (tablica[j] < tablica[i])
        {
            tab_pom[k] = tablica[j];
            j++;
        }
        else
        {
            tab_pom[k] = tablica[i];
            i++;
        }
        k++;
    }

    if (i <= srodek)
    {
        while (i <= srodek)
        {
            tab_pom[k] = tablica[i];
            i++;
            k++;
        }
    }
    else
    {
        while (j <= koniec)
        {
            tab_pom[k] = tablica[j];
            j++;
            k++;
        }
    }

    for (i = 0; i <= koniec-start; i++)
        tablica[start+i] = tab_pom[i];

    delete [] tab_pom;
}

void sortowaniePrzezScalanie(int tablica[], int start, int koniec)
{
    int srodek;

    if (start != koniec)
    {
        srodek = (start + koniec)/2;
        sortowaniePrzezScalanie(tablica, start, srodek);
        sortowaniePrzezScalanie(tablica, srodek+1, koniec);
        scalanie(tablica, start, srodek, koniec);
    }
}

void sortowaniePrzezWybieranie (int tab[], int n)
{
    int najmniejszaLiczba;

    for(int i=0; i<n-1; i++)
    {
        najmniejszaLiczba = i;

        for(int j=i+1; j<n; j++)
        {
            if(tab[j] < tab[najmniejszaLiczba])
            {
                najmniejszaLiczba = j;
            }
        }
        swap(tab[i], tab[najmniejszaLiczba]);
    }
}

void sortowaniePrzezWstawianie(int tab[], int rozmiar)
{
    int x,k;

    for(int i=1; i<rozmiar; i++)
    {
        x=tab[i];

        for(k=i-1; k>=0; k--)
        {
            if(x<tab[k])
            {
                tab[k+1]=tab[k];
            }
            else
                break;
        }
        tab[k+1]=x;
    }
}


bool czyTablicaJestPosortowana(int tablica[], int iloscLiczb)
{
    bool posortowana = true;
    for (int i = 0; i < iloscLiczb-1; i++)
    {
        if (tablica[i] > tablica[i+1])

            posortowana = false;
    }
    return posortowana;
}
